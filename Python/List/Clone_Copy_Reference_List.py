'''
由于列表list在python中是复杂变量，所以一般来说赋值与传参数的时候都是引用，如果需要建立一个新的列表并克隆旧列表的值，
或者传值作为实参的话，可以使用不同的方式复制列表
具体来说，反而是list[:]或者list(list)会快一些，因为直接利用了python自带的语法元素
而copy.copy(list)则比较慢，copy.deepcopy则是最慢的
'''

l1 = [1,2,3,4,5,6,7,8,9]

#将l1直接赋值到l2，一般来说对于list变量的话，只是简单的引用
l2 = l1

l1.reverse()

print("l2引用l1的结果是l1反转后l2也跟着反转：", l2)

l3 = [1,2,3,4,5,6,7,8,9]

# 这个操作是逐一将l3的第一层元素读出然后赋值到l4，所以这个是一个浅 copy
l4 = l3[:]
step = 1
# 当然这个操作主要作用并不是用来复制list的，而是用来读取某些符合条件的元素之后用来组成新list的
l5 = l3[::2] #每两个元素取一个
l6 = l3[::step + 1] #步长支持简单的表达式，但不能结果一定要是一个整数而且不能为0，步长不支持动态变化
l10 = l3[::-1] #使用负数表示从后开始读取与复制
l3.reverse()
print("l4克隆l3的结果是l3反转后l4不会跟着反转：", l4)
print("#每两个元素取一个：", l5)
print("#使用简单表达式控制步长：", l6)
print("#使用负数表示从后开始读取与复制：", l10)

#使用内置方法list()来复制

l11 = [1,2,3,4,5,6,7,8,9,[10,11,12,13]]

#这个方法应该与l11[:]应该是一样的，因为一样是浅 copy
l12 = list(l11)

l11[9].reverse()

l11.reverse()

print("使用内置方法list()来复制: ", l12)

#使用python的库提供的方法来复制list
import copy
l7 = [1,2,3,4,5,6,7,8,[9,10,11,12,13]]
#使用浅复制，只有list中第一层的元素是复制的，但第二层开始就是引用
l8 = copy.copy(l7)
#使用深复制，无论多少层，都会被复制而不是引用
l9 = copy.deepcopy(l7)
l7[8].reverse()
l7.reverse()
print("使用copy库来复制list: ", l8)
print("使用copy库来深度复制list: ", l9)

#python3.3之后，list的成员方法中直接提供了copy方法，实际上还是浅 copy

l13 = [1,2,3,4,5,6,7,8,9,[10,11,12,13]]

l14 = l13.copy()

l13[9].reverse()

l13.reverse()

print("python3.3之后，list的成员方法中直接提供了copy方法: ", l14)
