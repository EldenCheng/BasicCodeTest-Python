"""
字符串是一个序列, 所以它可以支持所有序列方法
但字符串本身是一个不可变常量, 所以对字符串的修改操作都是生成另一个新的字符串对象
"""

if __name__ == "__main__":

    s1 = ''  # 空字符串

    print("空逻辑上是False: ", bool(s1))  # 空字符串与空列表一样,逻辑上是False

    s2 = "I say 'Hello world'"  # 引号套用

    s3 = "I say \"Hello world\""  # 使用转义字符

    s5 = r"c:\windows"  # 字符串raw模式, 会自动尝试将Python不支持的字符转义为支持的字符
    print("字符串raw模式: ", s5)
    print("字符串raw模式下的字符串长度: ", len(s5))  # 要注意需要Python会自动尝试将不支持的字符转义为支持的字符, 但字符串长度还是按照原字符串长度算的

    s6 = b"A"  # 使用二进制存储字符串

    print("使用二进制存储字符串:", s6)

    s7 = "I say " + "'Hello world'"  # 字符串合并

    print("字符串合并: ", s7)

    print("使用下标访问字符: ", s7[0])  # 使用下标访问字符

    print("字符串分片: ", s7[3:5])  # 字符串分片

    print("从最开始到位置6的子字符串: ", s7[:5])  # 从最开始到位置6的子字符串

    print("获取倒数第一个字符: ", s7[-1])  # 获取倒数第一个字符, 负数的意思是从反方向计算字符位置, Python不支持-0, 所以-1的位置就是最后一个字符所有的位置了

    print("从倒数第4个字符到最后位置的子字符串: ", s7[-4:])  # 从倒数第4个字符到最后位置的子字符串

    print("正方向每隔两个字符串获取子字符串: ", s7[::2])  # 正方向每隔两个字符串获取子字符串

    print("反方向每隔两个字符串获取子字符串: ", s7[::-2])  # 反方向每隔两个字符串获取子字符串

    print("步进长度中可以使用表达式的", s7[:: 1 if s1 else 3])  # 步进长度中可以使用表达式的

    s8 = "Hello" * 3  # 字符串重复

    print("字符串重复: ", s8)

    s4 = """三重引号字符串"""  # 一般用于多行注释, 另外如果需要引入一个多行的字符串的话,也可以使用三重引号字符串

    s9 = """   
        Title
1. Info
   It is a info that to be tested
2. Program
   It is a program that to be tested
         """
    print("三重引号字符串: ", s9)  # 但是注意的是三重引号字符串里的空格与换行也会被记录起来, 所以如果用于字符串的话这些要注意
