"""
Python中支持的表达式有:
1. +,-,*,/ (加，减，乘，除)
2. //, %, ** (floor除法，取模，幂运算)
3. <, <=, ==, !=, >, >= (小于，小于等于， 等于，不等于，大于，大于等于)
4. and, or, not (逻辑与，逻辑或，逻辑非)
5. |, ^, &, <<, >>, ~ (位或，位异或，位与，位左移，位右移，按位求补)
6. yeild (生成器函数发送协议)
7. lambda (匿名函数)
"""

# 真除法会尝试保留得数所有的数位，如果除数与被除数精度不够，会自动提升精度
print("真除法:", 3 / 2)

# floor除法，得数只余整数部分，注意，这里余的整数部分一定会比得数小，这个在负数中很重要
print("floor除法:", 3 // 2)

print("负数的floor除法:", -3 // 2)

# 要注意逻辑与中，只有前一个参数为真时，才会尝试去判断后一个的真假
print("逻辑与的前一个为假，即为假:", False and a)
try:
    print(True and a)
except Exception as msg:
    print("逻辑与中前一个为真，才会计算后一个:", msg)

# 要注意逻辑或中，只有前一个参数为假，才会尝试去判断后一个的真假
print("逻辑或的前一个为真，即为真:", True or a)
try:
    print(False or a)
except Exception as msg:
    print("逻辑或中前一个为假，才会计算后一个:", msg)

# 连续测试
# 一般来说如果要在程序中要测试X>Y>Z的话，其它语言可能就要X>Y and Y>Z，但Python可以直接写，这叫做连续测试
print("连续测试，1<2<3: ", 1 < 2 < 3)

# 使用bin与len()方法来获得一个二进制数值的位数，实际上就是减去前面的"0b"两位长度
print("使用bit与len方法来获得一个数值的二进制位数:", len(bin(256))-2)

